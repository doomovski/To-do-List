document.addEventListener('DOMContentLoaded', function() {
    const buttonsContainer = document.querySelector('.nav-buttons');
    let buttons = document.querySelectorAll('.nav-buttons .button, .nav-buttons .button-create');
    const taskList = document.querySelector('.task-list');
    const searchBar = document.querySelector('.search-bar');
    const taskInput = searchBar.querySelector('.add-task');
    const addTaskButton = searchBar.querySelector('.button-do');
    const trashIcon = searchBar.querySelector('span');
    
    let activeGroup = 'today';
    const tasksByGroup = {
        'today': [],
        'tomorrow': []
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∫–Ω–æ–ø–æ–∫
    function updateButtonListeners() {
        buttons = document.querySelectorAll('.nav-buttons .button, .nav-buttons .button-create');
        buttons.forEach(button => {
            button.removeEventListener('click', handleButtonClick);
            button.addEventListener('click', handleButtonClick);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º
    function handleButtonClick() {
        buttons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');

        const groupName = this.getAttribute('data-group');
        if (groupName) {
            activeGroup = groupName;
            renderTasks();
        }
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–¥–∞—á —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function renderTasks() {
        const tasks = tasksByGroup[activeGroup] || [];
        const taskItems = taskList.querySelectorAll('.task-item');
        taskItems.forEach(item => item.remove());

        tasks.forEach(task => {
            const taskItem = document.createElement('div');
            taskItem.className = 'task-item';
            taskItem.innerHTML = `
                <input class="check-box" type="checkbox" ${task.completed ? 'checked' : ''}>
                <span class="task-text" style="text-decoration: ${task.completed ? 'line-through' : 'none'}; opacity: ${task.completed ? '0.5' : '1'}">${task.text}</span>
                <div class="verticalLine-item">/</div>
                <div class="task-icons">
                    <span class="icon" onclick="editTask(this)">‚öôÔ∏è</span>
                    <span class="icon" onclick="deleteTask(this)">üóëÔ∏è</span>
                </div>
            `;
            taskList.appendChild(taskItem);
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –∫–∞–∂–¥–æ–º—É –Ω–æ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            taskItem.style.animation = 'slideUp 0.3s ease-out forwards';
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    document.querySelector('.button-create').addEventListener('click', function() {
        const newGroupName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:');
        if (!newGroupName || newGroupName.trim() === '') return;

        const groupId = newGroupName.toLowerCase().replace(/\s+/g, '-');
        if (tasksByGroup[groupId]) {
            alert('–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        const newButton = document.createElement('div');
        newButton.className = 'button';
        newButton.textContent = newGroupName;
        newButton.setAttribute('data-group', groupId);
        buttonsContainer.insertBefore(newButton, this);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        tasksByGroup[groupId] = [];

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
        buttons.forEach(btn => btn.classList.remove('active'));
        newButton.classList.add('active');
        activeGroup = groupId;
        renderTasks();

        updateButtonListeners();
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    buttons.forEach(button => button.addEventListener('click', handleButtonClick));
    if (buttons.length > 0) {
        buttons[0].classList.add('active');
        buttons[0].setAttribute('data-group', 'today');
        buttons[1].setAttribute('data-group', 'tomorrow');
        renderTasks();
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    function addTask(text) {
        if (!text || text.trim() === '') return;

        if (!tasksByGroup[activeGroup]) tasksByGroup[activeGroup] = [];
        tasksByGroup[activeGroup].unshift({ text, completed: false });

        renderTasks();
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π .task-item –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const taskItems = taskList.querySelectorAll('.task-item');
        const lastTaskItem = taskItems[taskItems.length - 1];
        if (lastTaskItem) {
            lastTaskItem.style.animation = 'slideUp 0.3s ease-out forwards';
        }

        taskInput.value = '';
    }

    addTaskButton.addEventListener('click', () => addTask(taskInput.value.trim()));
    taskInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') addTask(taskInput.value.trim());
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    window.deleteTask = function (icon) {
        const taskItem = icon.closest('.task-item');
        const taskText = taskItem.querySelector('.task-text').textContent;
    
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è
        taskItem.classList.add('removing');
    
        // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏, –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ DOM
        setTimeout(() => {
            taskItem.remove(); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
            tasksByGroup[activeGroup] = tasksByGroup[activeGroup].filter(task => task.text !== taskText);
            renderTasks();
        }, 300); // 0.3s ‚Äî –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    };
    

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    window.editTask = function(icon) {
        const taskItem = icon.closest('.task-item');
        const taskText = taskItem.querySelector('.task-text');
        const currentText = taskText.textContent;

        const input = document.createElement('input');
        input.value = currentText;
        input.className = 'edit-input';
        input.style.cssText = 'width: 200px; border-radius: 5px; padding: 5px; background: rgba(255, 255, 255, 0.1); color: white;';

        taskText.replaceWith(input);
        input.focus();

        input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && input.value.trim()) {
                const newText = input.value.trim();
                const taskIndex = tasksByGroup[activeGroup].findIndex(task => task.text === currentText);
                if (taskIndex !== -1) {
                    tasksByGroup[activeGroup][taskIndex].text = newText;
                    renderTasks();
                }
            }
        });

        input.addEventListener('blur', () => {
            const newText = input.value.trim();
            if (newText) {
                const taskIndex = tasksByGroup[activeGroup].findIndex(task => task.text === currentText);
                if (taskIndex !== -1) {
                    tasksByGroup[activeGroup][taskIndex].text = newText;
                    renderTasks();
                }
            } else {
                renderTasks();
            }
        });
    };

    // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
    trashIcon.addEventListener('click', () => {
        tasksByGroup[activeGroup] = [];
        renderTasks();
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ checkbox
    taskList.addEventListener('change', (e) => {
        if (e.target.className === 'check-box') {
            const taskItem = e.target.closest('.task-item');
            const taskText = taskItem.querySelector('.task-text').textContent;
            const taskIndex = tasksByGroup[activeGroup].findIndex(task => task.text === taskText);
            if (taskIndex !== -1) {
                tasksByGroup[activeGroup][taskIndex].completed = e.target.checked;
                renderTasks();
            }
        }
    });

    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    function padZero(num) {
        return num.toString().padStart(2, '0');
    }

    function getFormattedDate() {
        const now = new Date();
        const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
        const months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è', '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'];
        return `${days[now.getDay()]}, ${now.getDate()} ${months[now.getMonth()]}`;
    }

    function getFormattedTime() {
        const now = new Date();
        return `${padZero(now.getHours())}:${padZero(now.getMinutes())}:${padZero(now.getSeconds())}`;
    }

    function updateDateTime() {
        const date2Element = document.querySelector('.date2');
        const timeElement = document.querySelector('.time');
        if (date2Element && timeElement) {
            date2Element.textContent = getFormattedDate();
            timeElement.textContent = getFormattedTime();
        }
    }

    updateDateTime();
    setInterval(updateDateTime, 1000);

});